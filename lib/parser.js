// Generated by CoffeeScript 1.3.3
(function() {
  var FrameParser, Parser, _toNumber;

  _toNumber = function(s, ebb) {
    var b;
    b = ebb ? 8 : 7;
    switch (s.length) {
      case 2:
        return s[1] | (s[0] << b);
      case 3:
        return s[2] | (s[1] << b) | (s[0] << (2 * b));
      case 4:
        return s[3] | (s[2] << b) | (s[1] << (2 * b)) | (s[0] << (3 * b));
    }
  };

  FrameParser = {};

  FrameParser._decodeText = function(data) {
    var encoding, headsz, len, tailsz;
    len = data.length;
    encoding = data[0];
    headsz = 0;
    tailsz = 0;
    switch (encoding) {
      case 0:
      case 3:
        headsz = tailsz = 1;
        break;
      case 1:
      case 2:
        headsz = tailsz = 2;
    }
    if (data[len - tailsz] !== 0) {
      tailsz = 0;
    }
    return data.toString('utf-8', headsz, len - tailsz);
  };

  FrameParser._v1Decoders = {
    'TAL': ['album', FrameParser._decodeText],
    'TP1': ['artist', FrameParser._decodeText],
    'TT2': ['title', FrameParser._decodeText],
    'TYE': ['year', FrameParser._decodeText],
    'TIM': ['time', FrameParser._decodeText]
  };

  FrameParser._v3Decoders = {
    'TALB': ['album', FrameParser._decodeText],
    'TPE1': ['artist', FrameParser._decodeText],
    'TIT2': ['title', FrameParser._decodeText],
    'TYER': ['year', FrameParser._decodeText],
    'TIME': ['time', FrameParser._decodeText]
  };

  FrameParser.get = function(version) {
    switch (version) {
      case 1:
      case 2:
        return FrameParser._v1Decoders;
      case 3:
      case 4:
        return FrameParser._v3Decoders;
    }
  };

  Parser = (function() {

    function Parser(data) {
      this.data = data;
      if (!this.data.slice(0, 3).toString() === 'ID3') {
        throw new Error('No ID3 tags present!');
      }
      this.version = this.data[3] | (this.data[4] << 8);
      this.size = _toNumber(this.data.slice(6, 10), false);
      this._initializeExtendedHeader();
      this._initializeFrames();
      this._initializeFooter();
      this.totalSize = this.size + 10 + (this.hasFooter ? 10 : 0);
      this.parsed = false;
    }

    Parser.prototype._initializeExtendedHeader = function() {
      this.hasExtendedHeader = this.data[5] & 0x40;
      if (this.hasExtenderHeader) {
        return this.extendedHeaderSize = _toNumber(this.data.slice(10, 14), false);
      }
    };

    Parser.prototype._initializeFrames = function() {
      var _ref;
      this.frameIdSize = 3;
      this.frameSizeSize = 3;
      this.frameFlagsSize = 0;
      if ((_ref = this.version) === 3 || _ref === 4) {
        this.frameIdSize = 4;
        this.frameSizeSize = 4;
        this.frameFlagsSize = 2;
      }
      return this.frameParser = FrameParser.get(this.version);
    };

    Parser.prototype._initializeFooter = function() {
      return this.hasFooter = this.data[5] & 0x10;
    };

    Parser.prototype._getFrameStart = function() {
      return 10 + (this.hasExtenderHeader ? 6 + this.extendedHeaderSize : 0);
    };

    Parser.prototype.parse = function() {
      var data, fl, flsz, frame, i, id, ids, idsz, max, p, parser, sz, szsz, tags;
      if (this.parsed) {
        return this.tags;
      }
      data = this.data;
      parser = this.frameParser;
      idsz = this.frameIdSize;
      szsz = this.frameSizeSize;
      flsz = this.frameFlagsSize;
      tags = this.tags = {};
      ids = this.ids = [];
      i = this._getFrameStart();
      max = this.totalSize - (this.hasFooter ? 10 : 0);
      while (i < max) {
        id = data.slice(i, i + idsz).toString();
        if (!/^[A-Z0-9]+$/.test(id)) {
          break;
        }
        i += idsz;
        ids.push(id);
        sz = _toNumber(data.slice(i, i + szsz), /A?PIC/.test(id));
        i += szsz;
        if (!parser[id]) {
          i += flsz + sz;
          continue;
        }
        fl = data.slice(i, i + flsz);
        i += flsz;
        frame = data.slice(i, i + sz);
        i += sz;
        p = parser[id];
        tags[p[0]] = p[1](frame);
      }
      this.parsed = true;
      return this.tags;
    };

    return Parser;

  })();

  module.exports.Parser = Parser;

}).call(this);
